{"name":"Express JWT Token","tagline":"A lean and configurable implementation of jwt auth for Express.js","body":"# JWT token auth for express.js\r\n[![Build Status](https://travis-ci.org/agconti/express-jwt-token.svg?branch=master)](https://travis-ci.org/agconti/express-jwt-token)\r\n[![npm version](https://badge.fury.io/js/express-jwt-token.svg)](http://badge.fury.io/js/express-jwt-token)\r\n\r\nThis package provides [JSON Web Token Authentication](http://tools.ietf.org/html/draft-ietf-oauth-json-web-token) support for\r\n[Express](http://expressjs.com/).\r\n\r\nNew to using JSON Web Tokens? Take a look at these resources:\r\n\r\n- [JSON Web Token Abstract](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html)\r\n- [Token based authentication with Socket.io](https://auth0.com/blog/2014/01/15/auth-with-socket-io/)\r\n- [JWT.io](http://jwt.io/)\r\n\r\n# Installation \r\n```bash\r\nnpm install express-jwt-token\r\n```\r\n\r\n# Usage\r\n```js\r\nvar express = require('express')\r\n  , auth = require('express-jwt-token')\r\n  , app = express()\r\n\r\n\r\n// Require jwt authorization on all routes\r\napp.use(auth.jwtAuthProtected)\r\n\r\n// Reguire jwt auth on a specfic route\r\napp.get('/', auth.jwtAuthProtected, function(req, res){\r\n  res.send({'msg': 'Im jwt auth protected!'})\r\n})\r\n\r\napp.listen(3000)\r\n```\r\nNow your route(s) are protected and require an authorization header in the form of:\r\n\r\n```\r\nAuthorization JWT < jwt token > \r\n```\r\n\r\n# Configuration\r\nConfigure your JWT Secret. This must be changed for production. Default value is `'secret'`. \r\n```js\r\nprocess.env.JWT_SECRET_KEY = 'Your Secret'\r\n```\r\n\r\nConfigure the authorization header prefix. this is optional. Default is `'JWT'`.\r\n```js\r\nprocess.env.jwtAuthHeaderPrefix\r\n```\r\n\r\n# Provided Middleware\r\n\r\n## ensureAuthorizationHeader\r\nAn Express.js middleware that ensures that a request has supplied an authorization header.\r\n* @param {object} req\r\n* @param {object} res\r\n* @param {function} next\r\n\r\n## validateJWTAuth\r\nAn Express.js middleware validates a JWT token.\r\n * @param {object} req\r\n * @param {object} res\r\n * @param {function} next\r\n\r\n## ensureAuthorized \r\nAn Express.js middleware that ensures that a request has supplied an authorization header.\r\n* @param {object} req\r\n* @param {object} res\r\n* @param {function} next\r\n\r\n## jwtAuthProtected \r\nThe grouped middleware needed to enforce jwt Auth. Mounts the same as a single middleware.\r\n\r\n# Errors \r\nWhen authorization fails `express-jwt-token` will return an `UnauthorizedError` with some helpful details about what went wrong. \r\n \r\nThis implementation was based on the excellent [django-rest-framework-jwt library](https://github.com/GetBlimp/django-rest-framework-jwt).\r\n","google":"UA-42266786-5","note":"Don't delete this file! It's used internally to help with page regeneration."}